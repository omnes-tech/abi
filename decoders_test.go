package abi_test

import (
	"fmt"

	"github.com/ethereum/go-ethereum/common"
	"github.com/omnes-tech/abi"
)

func ExampleDecode() {
	encoded := common.Hex2Bytes("0000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e0000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e0000000000000000000000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e000000000000000000")

	decoded, err := abi.Decode(
		[]string{"address", "uint256[]", "bytes", "(address,uint256[],bytes)[]"},
		encoded,
	)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(decoded)

	// Output: [0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46] [[0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46]] [0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46]]]]
}

func ExampleDecodePacked() {
	encoded := common.Hex2Bytes("5ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000006461726269747261727920627974652061727261792e2e2e")

	decoded, err := abi.DecodePacked(
		[]string{"address", "uint256", "bytes"},
		encoded,
	)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(decoded)

	// Output: [0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 100 61726269747261727920627974652061727261792e2e2e]
}

func ExampleDecodeWithSignature() {
	encoded := common.Hex2Bytes("c6210dba0000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e0000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e0000000000000000000000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e000000000000000000")

	funcSignature := "functionName(address,uint256[],bytes,(address,uint256[],bytes)[])"
	decoded, err := abi.DecodeWithSignature(
		funcSignature,
		encoded,
	)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(decoded)

	// Output: [0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46] [[0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46]] [0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46]]]]
}

func ExampleDecodeWithSelector() {
	encoded := common.Hex2Bytes("c6210dba0000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e0000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e0000000000000000000000000000000000000000005ff137d4b0fdcd49dca30c7cf57e578a026d2789000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001761726269747261727920627974652061727261792e2e2e000000000000000000")

	funcSignature := "functionName(address,uint256[],bytes,(address,uint256[],bytes)[])"
	selector := abi.EncodeSignature(funcSignature)
	decoded, err := abi.DecodeWithSelector(
		selector,
		[]string{"address", "uint256[]", "bytes", "(address,uint256[],bytes)[]"},
		encoded,
	)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(decoded)

	// Output: [0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46] [[0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46]] [0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789 [100 352] [97 114 98 105 116 114 97 114 121 32 98 121 116 101 32 97 114 114 97 121 46 46 46]]]]
}
